/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package vistas;

import controlador.ControladorMonitoreo;
import controlador.IVistaMonitoreo;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;
import modelo.Llamada;
import modelo.Sector;

/**
 *
 * @author Julio Peraza
 */
public class VistaMonitoreoConTabla extends javax.swing.JDialog implements IVistaMonitoreo {

    private ControladorMonitoreo controlador;
    private boolean seleccionoTodos;

    /**
     * Creates new form VistaMonitoreo
     */
    public VistaMonitoreoConTabla(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        controlador = new ControladorMonitoreo(this);
        mostrarSectores(controlador.listarSectores());

    }

    private void seleccionSector() {
        int pos = listSectores.getSelectedIndex();
        Sector seleccionado = null;
        if (pos == 0) {
            agregarHeaders();
            seleccionoTodos = true;
            controlador.todos(seleccionoTodos);
            controlador.listarLlamadasDeTodosLosSectores();
        } else if (pos != -1) {
            agregarHeaders();
            seleccionoTodos = false;
            controlador.todos(seleccionoTodos);
            seleccionado = controlador.listarSectores().get(pos - 1);
            controlador.seleccion(seleccionado, seleccionoTodos);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        listSectores = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaResultado = new javax.swing.JTable();
        bSalir = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Aplicaciones de monitoreo");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        listSectores.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listSectoresValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(listSectores);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setText("Sectores");

        tablaResultado.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(tablaResultado);

        bSalir.setText("Salir");
        bSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSalirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 757, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(bSalir)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 733, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(42, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(bSalir)
                .addContainerGap(179, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened

        agregarHeaders();

    }//GEN-LAST:event_formWindowOpened

    private void listSectoresValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listSectoresValueChanged
        // TODO add your handling code here:
        seleccionSector();
    }//GEN-LAST:event_listSectoresValueChanged

    private void bSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSalirActionPerformed
        // TODO add your handling code here:
        controlador.quitarObservador();
        dispose();
    }//GEN-LAST:event_bSalirActionPerformed

    public void mostrarSectores(ArrayList<Sector> sectores) {
        ArrayList<Sector> aux = new ArrayList();
        aux.add(new Sector("Todos"));
        for (Sector sector : sectores) {
            aux.add(sector);
        }
        listSectores.setListData(aux.toArray());
    }

    @Override
    public void borrarDetalles() {
        DefaultTableModel dtm = (DefaultTableModel) tablaResultado.getModel();
        dtm.setRowCount(0);
    }

    private void agregarHeaders() {
        DefaultTableModel tabla = (DefaultTableModel) tablaResultado.getModel();
        tabla.setColumnCount(0);

        if (seleccionoTodos) {
            tabla.addColumn("Sector");
        }
        tabla.addColumn("#Llamada");
        tabla.addColumn("Estado");
        tabla.addColumn("Inicio");
        tabla.addColumn("Fin");
        tabla.addColumn("#Puesto");
        tabla.addColumn("Trabajador");
        tabla.addColumn("Duracion");
        tabla.addColumn("Costo");
        tabla.addColumn("Cliente");
        tabla.addColumn("Saldo");
        //tablaResultado.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
    }

    @Override
    public void mostrarLlamadas(ArrayList<Llamada> listaLlamadas, boolean todos) {
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");
        borrarDetalles();
        if (todos) {
            mostrarTodasLasLlamadas(listaLlamadas, sdf);

        } else {
            mostrarLlamadasDelSector(listaLlamadas, sdf);

        }
    }

    private void mostrarTodasLasLlamadas(ArrayList<Llamada> listaLlamadas, SimpleDateFormat sdf) {

        for (int i = 0; i <= listaLlamadas.size() - 1; i++) {
            Llamada l = listaLlamadas.get(i);
            if (l.getAtendida() != null) {
                if (l.getFin() == null) {
                    Object row[] = {l.getSector(), l.getIdLlamada(), l.getEstadoSin(), sdf.format(l.getAtendida()),
                        "-", l.getPuesto().getIdPuesto(), l.getTrabajador().getNombreCompleto(), "-", "-",
                        l.getCliente().getNombre(), "$" + l.getCliente().getSaldo()
                    };
                    ((DefaultTableModel) tablaResultado.getModel()).addRow(row);

                } else {
                    Object row[] = {l.getSector(), l.getIdLlamada(), l.getEstadoSin(), sdf.format(l.getAtendida()),
                        sdf.format(l.getFin()), l.getPuesto().getIdPuesto(), l.getTrabajador().getNombreCompleto(), l.duracionAtendidaFin(), l.calcularCosto(),
                        l.getCliente().getNombre(), "$" + l.getSaldoAlFinalizarLlamada()
                    };
                    ((DefaultTableModel) tablaResultado.getModel()).addRow(row);
                }
            }
        }
    }

    private void mostrarLlamadasDelSector(ArrayList<Llamada> listaLlamadas, SimpleDateFormat sdf) {

        for (int i = 0; i <= listaLlamadas.size() - 1; i++) {
            Llamada l = listaLlamadas.get(i);
            if (l.getAtendida() != null) {
                if (l.getFin() == null) {
                    Object row[] = {l.getIdLlamada(), l.getEstadoSin(), sdf.format(l.getAtendida()),
                        "-", l.getPuesto().getIdPuesto(), l.getTrabajador().getNombreCompleto(), "-", "-",
                        l.getCliente().getNombre(), "$" + l.getCliente().getSaldo()
                    };
                    ((DefaultTableModel) tablaResultado.getModel()).addRow(row);

                } else {
                    Object row[] = {l.getIdLlamada(), l.getEstadoSin(), sdf.format(l.getAtendida()),
                        sdf.format(l.getFin()), l.getPuesto().getIdPuesto(), l.getTrabajador().getNombreCompleto(), l.duracionAtendidaFin(), l.calcularCosto(),
                        l.getCliente().getNombre(), "$" + l.getSaldoAlFinalizarLlamada()
                    };
                    ((DefaultTableModel) tablaResultado.getModel()).addRow(row);
                }
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bSalir;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JList listSectores;
    private javax.swing.JTable tablaResultado;
    // End of variables declaration//GEN-END:variables

}
